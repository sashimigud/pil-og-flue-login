{"version":3,"sources":["assets/Bouvet-logo.png","components/home/home.component.jsx","components/customInput/custom-input.component.jsx","components/customButton/custom-button.component.jsx","components/login/login.component.jsx","components/customCheckbox/custom-checkbox.component.jsx","components/signup/sign-up.component.jsx","components/dashboard/dashboard.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","to","CustomInput","handleChange","label","toUpperCase","onChange","placeholder","name","CustomButton","children","handleClick","onClick","withRouter","history","useState","username","email","setCredentials","target","value","prevState","onSubmit","event","preventDefault","console","log","autoComplete","type","push","CustomCheckbox","attending","setAttending","mode","showPanel","setShowPanel","App","exact","path","component","Login","render","Dashboard","src","bouvetLogo","alt","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e81eb184.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bouvet-logo.5fb48959.png\";","import React from \"react\";\r\nimport \"./home.styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"left-panel\">\r\n        <div className=\"login-link\">\r\n          <Link className=\"home-nav-link pulse\" to=\"/login\">\r\n            LOGIN HERE\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <div className=\"right-panel\">\r\n        <div className=\"sign-up-link\">\r\n          <Link className=\"home-nav-link wiggle\" to=\"/signup\">\r\n            SIGN UP HERE\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./custom-input.styles.scss\";\r\n\r\nconst CustomInput = ({ handleChange, label }) => {\r\n  return (\r\n    <>\r\n      <label className=\"custom-input-label\">{label.toUpperCase()}:</label>\r\n      <input\r\n        className=\"custom-input\"\r\n        onChange={handleChange}\r\n        placeholder=\"...\"\r\n        name={label}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomInput;\r\n","import React from \"react\";\r\nimport \"./custom-button.styles.scss\";\r\n\r\nconst CustomButton = ({ children, handleClick }) => {\r\n  return (\r\n    <button className=\"custom-button\" onClick={handleClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./login.styles.scss\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport CustomInput from \"../customInput/custom-input.component\";\r\nimport CustomButton from \"../customButton/custom-button.component\";\r\n\r\nconst Login = ({ history }) => {\r\n  const [{ username, email }, setCredentials] = useState({\r\n    username: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n  // const [user, setUser] = useState(null);\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    // console.log(\"name: \" + name + \" and value:\" + value);\r\n    setCredentials(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(\"submit fired!\", username, email);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   let url = \"https://jsonplaceholder.typicode.com/\";\r\n  //   fetch(url + \"users/1\")\r\n  //     .then(response => response.json())\r\n  //     .then(json => console.log(json));\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2 className=\"login-header\">SIGN IN:</h2>\r\n      <form className=\"login-form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <CustomInput\r\n          label=\"username\"\r\n          handleChange={handleChange}\r\n          value={username}\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n        />\r\n        <CustomInput\r\n          label=\"email\"\r\n          handleChange={handleChange}\r\n          value={email}\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <CustomButton handleClick={() => history.push(\"/dashboard\")}>\r\n          SIGN IN\r\n        </CustomButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Login);\r\n","import React, { useState } from \"react\";\r\nimport \"./custom-checkbox.styles.scss\";\r\n\r\nconst CustomCheckbox = () => {\r\n  const [attending, setAttending] = useState(false);\r\n\r\n  return (\r\n    <div className=\"checkbox-container\">\r\n      <p>I will attend the dinner: </p>\r\n      <input\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        onClick={() => {\r\n          setAttending(!attending);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomCheckbox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./sign-up.styles.scss\";\r\n\r\nimport CustomInput from \"../customInput/custom-input.component\";\r\nimport CustomButton from \"../customButton/custom-button.component\";\r\nimport CustomCheckbox from \"../customCheckbox/custom-checkbox.component\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst SignUp = ({ children, history, mode }) => {\r\n  const [{ username, email }, setCredentials] = useState({\r\n    username: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n  // const [user, setUser] = useState(null);\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    setCredentials(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  // const handleSubmit = event => {\r\n  //   event.preventDefault();\r\n  //   console.log(\"submit fired!\", username, email);\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   let url = \"https://jsonplaceholder.typicode.com/\";\r\n  //   fetch(url + \"users/1\")\r\n  //     .then(response => response.json())\r\n  //     .then(json => console.log(json));\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"signup-container\">\r\n      <h2 className=\"signup-header\">{children}:</h2>\r\n      <form className=\"signup-form\" autoComplete=\"off\">\r\n        <CustomInput\r\n          label=\"username\"\r\n          handleChange={handleChange}\r\n          value={username}\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n        />\r\n        <CustomInput\r\n          label=\"email\"\r\n          handleChange={handleChange}\r\n          value={email}\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <CustomCheckbox />\r\n        <CustomButton\r\n          handleClick={() => {\r\n            history.push(\"/dashboard\");\r\n          }}\r\n        >\r\n          {children}\r\n        </CustomButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(SignUp);\r\n","import React, { useState } from \"react\";\r\nimport \"./dashboard.styles.scss\";\r\nimport SignUp from \"../signup/sign-up.component\";\r\nimport CustomButton from \"../customButton/custom-button.component\";\r\n\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst Dashboard = ({ history }) => {\r\n  const [showPanel, setShowPanel] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setShowPanel(!showPanel);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <div>\r\n        <h1 className=\"user-greeting\">Hello Username</h1>\r\n        <p className=\"user-message\">Get ready to play!</p>\r\n      </div>\r\n      <div className=\"dash-button-container\">\r\n        <CustomButton handleClick={handleClick}>\r\n          TOGGLE UPDATE DETAILS\r\n        </CustomButton>\r\n      </div>\r\n      {showPanel ? <SignUp>UPDATE DETAILS</SignUp> : null}\r\n      <p>OR</p>\r\n      <button onClick={() => history.push(\"/\")} className=\"logout-button\">\r\n        LOG OUT\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Dashboard);\r\n","import React from \"react\";\nimport bouvetLogo from \"./assets/Bouvet-logo.png\";\nimport \"./App.css\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Home from \"./components/home/home.component\";\nimport Login from \"./components/login/login.component\";\nimport SignUp from \"./components/signup/sign-up.component\";\nimport Dashboard from \"./components/dashboard/dashboard.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <h1 className=\"pof-heading\">Pil og Flue</h1>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" render={() => <SignUp>SIGN UP</SignUp>} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n        <img className=\"bouvet-logo\" src={bouvetLogo} alt=\"Bouvet logo\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}